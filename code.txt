#property copyright "2024, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

input double LotSize = 0.1;
input int TakeProfitPoints = 100;
input int StopLossPoints = 50;
input int SMAPeriod = 14;
input int SlopeThreshold = 0; 

double lastSMA = 0;
double currentSMA = 0;
double lastPrice = 0;

int OnInit()
  {
   
   currentSMA = iMA(NULL, 0, SMAPeriod, 0, MODE_SMA, PRICE_CLOSE, 0);
   lastSMA = iMA(NULL, 0, SMAPeriod, 0, MODE_SMA, PRICE_CLOSE, 1);
   lastPrice = Close[1];
   return(INIT_SUCCEEDED);
  }

void OnDeinit(const int reason)
  {
   // Cleanup
  }

void OnTick()
  {
   // Calculate the current SMA
   currentSMA = iMA(NULL, 0, SMAPeriod, 0, MODE_SMA, PRICE_CLOSE, 0);
   double price = Ask;
   double sl = price - StopLossPoints * Point;
   double tp = price + TakeProfitPoints * Point;
   
   // Check SMA slope
   double slope = currentSMA - lastSMA;

   // Adjust take profit if slope is positive
   if(slope > SlopeThreshold)
     {
      for(int i = 0; i < OrdersTotal(); i++)
        {
         if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
           {
            if(OrderType() == OP_BUY)
              {
               double newTP = price + TakeProfitPoints * Point;
               if(OrderModify(OrderTicket(), OrderOpenPrice(), OrderStopLoss(), newTP, 0, Blue))
                 {
                  Print("Order modified: Ticket = ", OrderTicket(), ", New TP = ", newTP);
                 }
              }
           }
        }
     }
   // Trigger a buy trade if slope is negative and price is lower than last close price
   else if(slope < -SlopeThreshold && price < lastPrice)
     {
      int ticket = OrderSend(Symbol(), OP_BUY, LotSize, price, 2, sl, tp, "SMA Buy", 0, 0, Blue);
      if(ticket < 0)
        {
         Print("Error opening order: ", GetLastError());
        }
      else
        {
         Print("Order opened successfully: Ticket = ", ticket, ", Price = ", price, ", SL = ", sl, ", TP = ", tp);
        }
     }
   
   // Update the last SMA and price for the next tick
   lastSMA = currentSMA;
   lastPrice = price;
   
   // Print the current account profit
   double profit = AccountProfit();
   Print("Current account profit: ", profit);
  }
//+------------------------------------------------------------------+
